package club.banyuan.view;

import club.banyuan.pojo.Question;
import club.banyuan.service.Impl.RandomSubjectImpl;
import club.banyuan.service.RandomSubject;

import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.TreeMap;

public class TestSingle extends JFrame  {

    static ArrayList<Integer> trueAnswer = new ArrayList();

        /**
         * Creates new form Test
         */
        /*调用题目*/
                /* 科目"Java", "Mysql", "Html", "C语言" })*/
         RandomSubject randomSubject = new RandomSubjectImpl();
        public TestSingle() {
            List<Question> questions = randomSubject.getTenQuestions(TestReady.subject,0,6);
            for (int i = 0; i < 6; i++) {
                mapSingleQuesion.put(i+1,questions.get(i).getQuestionText());
                trueAnswer.add(questions.get(i).getOpt());
            }
            initComponents();
            setLocationRelativeTo(null);
            setResizable(false);
            jTextArea1.setText((String) mapSingleQuesion.get(count));
            this.enableEvents(AWTEvent.WINDOW_FOCUS_EVENT_MASK);
        }

    static TestSingle testSingle;

    @Override
    protected void processWindowEvent(WindowEvent e) {
        if (e.getID()==WindowEvent.WINDOW_CLOSING)
            return;
        super.processWindowEvent(e);
    }

    static int count=1;
    static Map<Integer, String > mapSingleQuesion=new TreeMap();
    static Map<Integer , String> mapSingleAnswer=new TreeMap();



        /**
         * This method is called from within the constructor to initialize the form.
         * WARNING: Do NOT modify this code. The content of this method is always
         * regenerated by the Form Editor.
         */
        @SuppressWarnings("unchecked")
        // <editor-fold defaultstate="collapsed" desc="Generated Code">
        private void initComponents() {
            single = new ButtonGroup();
            optionA = new JRadioButton();
            optionB = new JRadioButton();
            optionC = new JRadioButton();
            optionD = new JRadioButton();
            optionF = new JRadioButton();
            slogan = new JLabel();
            singleTest = new JLabel();
            nextSubject = new JButton();
            lastSubject = new JButton();
            jScrollPane1 = new JScrollPane();
            jTextArea1 = new JTextArea();

            setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);



            single.add(optionA);
            optionA.setText("A");
            optionA.addActionListener(new ActionListener() {
                public void actionPerformed(ActionEvent evt) {
                    optionAActionPerformed(evt);
                }
            });

            single.add(optionB);
            single.add(optionF);
            optionB.setText("B");
            optionB.addActionListener(new ActionListener() {
                public void actionPerformed(ActionEvent evt) {
                    optionBActionPerformed(evt);
                }
            });

            single.add(optionC);
            optionC.setText("C");

            single.add(optionD);
            optionD.setText("D");

            slogan.setFont(new Font("Lucida Grande", 0, 14)); // NOI18N
            slogan.setText("---半圆学社严打考试作弊");

            singleTest.setFont(new Font("Lucida Grande", 0, 18)); // NOI18N
            singleTest.setText("单选题");




            nextSubject.setText("下一题");
            nextSubject.addActionListener(new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent e) {
                        if (optionA.isSelected()) {
                            mapSingleAnswer.put(count, "A");
                        } else if (optionB.isSelected()) {
                            mapSingleAnswer.put(count, "B");
                        } else if (optionC.isSelected()) {
                            mapSingleAnswer.put(count, "C");
                        } else if (optionD.isSelected()) {
                            mapSingleAnswer.put(count, "D");
                        } else {
                            mapSingleAnswer.put(count, optionF.getText());
                        }
                        optionF.setSelected(true);
//                    optionA.isOpaque();
//                    optionA.setSelected(false);
//                    optionB.setSelected(true);
//                    optionC.setSelected(true);
//                    optionD.setSelected(true);
                        count++;
                        jTextArea1.setText((String) mapSingleQuesion.get(count));
                        System.out.println(count);
                    if (count > 6) {
                        setVisible(false);
                        TestMultiple.TestMultupleStart();
                        /*for (Map.Entry o : mapSingleAnswer.entrySet()) {

                        }*/
                    }else if (mapSingleAnswer.containsKey(count)) {
                            if (mapSingleAnswer.get(count).equals(optionA.getText())) {
                                optionA.setSelected(true);
                            } else if (mapSingleAnswer.get(count).equals(optionB.getText())) {
                                optionB.setSelected(true);
                            } else if (mapSingleAnswer.get(count).equals(optionC.getText())) {
                                optionC.setSelected(true);
                            } else if (mapSingleAnswer.get(count).equals(optionD.getText())) {
                                optionD.setSelected(true);
                            } else {
                                optionF.setSelected(true);
                            }
                        }

                }
            });

            lastSubject.setText("上一题");
            lastSubject.addActionListener(new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent e) {
                    if (count >= 2) {
                        count--;
                        jTextArea1.setText((String) mapSingleQuesion.get(count));
                        if (mapSingleAnswer.get(count).equals(optionA.getText())) {
                            optionA.setSelected(true);
                        } else if (mapSingleAnswer.get(count).equals(optionB.getText())) {
                            optionB.setSelected(true);
                        } else if (mapSingleAnswer.get(count).equals(optionC.getText())) {
                            optionC.setSelected(true);
                        } else if (mapSingleAnswer.get(count).equals(optionD.getText())){
                            optionD.setSelected(true);
                        }else {
                            optionF.setSelected(true);
                        }
                    }
                }
            });

            jTextArea1.setColumns(20);
            jTextArea1.setRows(5);
            jTextArea1.setText("");
            jTextArea1.setEnabled(false);
            jTextArea1.setCaretPosition(0);
            jScrollPane1.setViewportView(jTextArea1);

            GroupLayout layout = new GroupLayout(getContentPane());
            getContentPane().setLayout(layout);
            layout.setHorizontalGroup(
                    layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                    .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                            .addGroup(layout.createSequentialGroup()
                                                    .addGap(107, 107, 107)
                                                    .addGroup(layout.createParallelGroup(GroupLayout.Alignment.TRAILING)
                                                            .addGroup(layout.createSequentialGroup()
                                                                    .addComponent(optionA)
                                                                    .addGap(74, 74, 74)
                                                                    .addComponent(optionB)
                                                                    .addGap(72, 72, 72)
                                                                    .addComponent(optionC)
                                                                    .addGap(52, 52, 52))
                                                            .addGroup(layout.createSequentialGroup()
                                                                    .addComponent(lastSubject)
                                                                    .addGap(26, 26, 26)
                                                                    .addComponent(nextSubject)
                                                                    .addGap(29, 29, 29)))
                                                    .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                                            .addComponent(slogan, GroupLayout.PREFERRED_SIZE, 164, GroupLayout.PREFERRED_SIZE)
                                                            .addGroup(layout.createSequentialGroup()
                                                                    .addGap(11, 11, 11)
                                                                    .addComponent(optionD))))
                                            .addGroup(layout.createSequentialGroup()
                                                    .addGap(35, 35, 35)
                                                    .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                                            .addComponent(singleTest, GroupLayout.PREFERRED_SIZE, 107, GroupLayout.PREFERRED_SIZE)
                                                            .addComponent(jScrollPane1, GroupLayout.PREFERRED_SIZE, 509, GroupLayout.PREFERRED_SIZE))))
                                    .addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                    .addGap(0, 0, Short.MAX_VALUE)

            ));
            layout.setVerticalGroup(
                    layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                    .addGap(18, 18, 18)
                                    .addComponent(singleTest, GroupLayout.PREFERRED_SIZE, 28, GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(jScrollPane1, GroupLayout.DEFAULT_SIZE, 160, Short.MAX_VALUE)
                                    .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addGroup(layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                                            .addComponent(optionA)
                                            .addComponent(optionB)
                                            .addComponent(optionC)
                                            .addComponent(optionD))
                                    .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                            .addGroup(layout.createSequentialGroup()
                                                    .addGap(32, 32, 32)
                                                    .addComponent(slogan, GroupLayout.PREFERRED_SIZE, 27, GroupLayout.PREFERRED_SIZE))
                                            .addGroup(layout.createSequentialGroup()
                                                    .addGap(18, 18, 18)
                                                    .addGroup(layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                                                            .addComponent(lastSubject)
                                                            .addComponent(nextSubject))))
                                    .addGap(15, 15, 15))
            );

            pack();
        }// </editor-fold>

        private void optionAActionPerformed(ActionEvent evt) {
            // TODO add your handling code here:
        }

        private void optionBActionPerformed(ActionEvent evt) {
            // TODO add your handling code here:
        }

        /**
         */
//        public static void TestSingleStart() {
        public static void TestSingleStart() {
            /* Set the Nimbus look and feel */
            //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
            /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
             * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
             */
            try {
                for (UIManager.LookAndFeelInfo info : UIManager.getInstalledLookAndFeels()) {
                    if ("Nimbus".equals(info.getName())) {
                        UIManager.setLookAndFeel(info.getClassName());
                        break;
                    }
                }
            } catch (ClassNotFoundException ex) {
                java.util.logging.Logger.getLogger(TestSingle.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
            } catch (InstantiationException ex) {
                java.util.logging.Logger.getLogger(TestSingle.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
            } catch (IllegalAccessException ex) {
                java.util.logging.Logger.getLogger(TestSingle.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
            } catch (UnsupportedLookAndFeelException ex) {
                java.util.logging.Logger.getLogger(TestSingle.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
            }
            //</editor-fold>
            //</editor-fold>
            //</editor-fold>
            //</editor-fold>

            /* Create and display the form */
            EventQueue.invokeLater(new Runnable() {
                public void run() {
                    if (testSingle==null){
                        synchronized (TestSingle.class) {
                            if (testSingle == null) {
                                testSingle = new TestSingle();
                                testSingle.setVisible(true);
                            }
                        }
                    }else {
                        testSingle.setVisible(true);
                    }
                }
            });
        }

        // Variables declaration - do not modify
        private JScrollPane jScrollPane1;
        private JTextArea jTextArea1;
        private JButton lastSubject;
        private JButton nextSubject;
        private JRadioButton optionA;
        private JRadioButton optionB;
        private JRadioButton optionC;
        private JRadioButton optionD;
        private JRadioButton optionF;
        private ButtonGroup single;
        private JLabel singleTest;
        private JLabel slogan;


    // End of variables declaration
    }

